#!/usr/bin/python

import sys


def usage():
    print 'Usage:'
    print sys.argv[0] + ' received_packets_log sent_packets_log'
    sys.exit(1)


def main():
    if len(sys.argv) != 3:
        usage()

    send_pkts = {}
    # sent_packets_log
    with open(sys.argv[2]) as send_log:
        # retrieve base timestamp from the first line
        line = send_log.readline()
        send_base_ts = int(line.rsplit(':', 1)[-1])

        for line in send_log:
            (send_ts, send_uid, send_size) = map(int, line.split('-'))
            send_pkts[send_uid] = (send_ts, send_size)

    last_ts = 0
    # received_packets_log
    with open(sys.argv[1]) as recv_log:
        # retrieve base timestamp from the first line
        line = recv_log.readline()
        recv_base_ts = int(line.rsplit(':', 1)[-1])
        print '# base timestamp: ' + recv_base_ts
        base_ts_delta = recv_base_ts - send_base_ts

        for line in recv_log:
            (recv_ts, recv_uid, recv_size) = map(int, line.split('-'))
            # timestamps went backward
            if recv_ts < last_ts:
                sys.stderr.write('Timestamps went backward!\n')
                sys.exit(1)
            else:
                last_ts = recv_ts

            (send_ts, send_size) = send_pkts[recv_uid]
            # inconsistent packet size
            if send_size != recv_size:
                sys.stderr.write('Packet %s came into tunnel with size %s '
                                 ' but left with size %s\n' %
                                 (send_uid, send_size, recv_size))
                sys.exit(1)

            # output timestamp on the receiver side, received packet size
            # and one-way delay
            print '%s - %s %s' % (recv_ts, recv_size,
                                  recv_ts - send_ts + base_ts_delta)


if __name__ == '__main__':
    main()

